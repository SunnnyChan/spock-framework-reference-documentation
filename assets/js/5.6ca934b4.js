(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{204:function(t,s,a){"use strict";a.r(s);var n=a(28),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"spock-framework-reference-documentation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spock-framework-reference-documentation"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"http://spockframework.github.io/spock/docs",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spock Framework Reference Documentation"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.apache.org/licenses/LICENSE-2.0.html",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://img.shields.io/badge/license-Apache%202-4EB1BA.svg",alt:"License"}}),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Peter Niederwieser, Leonard Brünings, The Spock Framework Team Version 1.3\n")])])]),a("h1",{attrs:{id:"table-of-contents"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[t._v("#")]),t._v(" Table of Contents")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#spock-framework-reference-documentation"}},[a("a",{attrs:{href:"http://spockframework.github.io/spock/docs",rel:"nofollow"}},[t._v("Spock Framework Reference Documentation")])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#table-of-contents"}},[t._v("Table of Contents")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#introduction-spock-%E4%BB%8B%E7%BB%8D"}},[t._v("Introduction [Spock 介绍]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#getting-started-%E8%B5%B7%E6%AD%A5"}},[t._v("Getting Started [起步]")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#spock-web-console-spock-%E5%9C%A8%E7%BA%BF%E6%8E%A7%E5%88%B6%E5%8F%B0"}},[t._v("Spock Web Console [Spock 在线控制台]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#spock-example-project-spock-%E6%A0%B7%E4%BE%8B%E5%B7%A5%E7%A8%8B"}},[t._v("Spock Example Project [Spock 样例工程]")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#spock-primer-spock-%E8%BF%9B%E9%98%B6"}},[t._v("Spock Primer [Spock 进阶]")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#terminology-%E6%9C%AF%E8%AF%AD"}},[t._v("Terminology [术语]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#imports-%E5%AF%BC%E5%85%A5"}},[t._v("Imports [导入]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#specification"}},[t._v("Specification")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#fields-%E5%8F%98%E9%87%8F%E5%AD%97%E6%AE%B5"}},[t._v("Fields [变量字段]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#fixture-methods-%E5%9B%BA%E5%AE%9A%E6%96%B9%E6%B3%95"}},[t._v("Fixture Methods [固定方法]")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#invocation-order-%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F"}},[t._v("Invocation Order [调用顺序]")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#feature-methods-%E5%8A%9F%E8%83%BD%E6%96%B9%E6%B3%95"}},[t._v("Feature Methods [功能方法]")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#blocks-%E5%9D%97"}},[t._v("Blocks [块]")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#helper-methods-%E8%BE%85%E5%8A%A9%E6%96%B9%E6%B3%95"}},[t._v("Helper Methods [辅助方法]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#using-with-for-expectations-%E4%BD%BF%E7%94%A8-with-%E5%A4%84%E7%90%86%E6%9C%9F%E6%9C%9B"}},[t._v("Using with for expectations [使用 with 处理期望]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#using-verifyall-to-assert-multiple-expectations-together-%E4%BD%BF%E7%94%A8verifyall%E6%89%B9%E9%87%8F%E6%96%AD%E8%A8%80"}},[t._v("Using verifyAll to assert multiple expectations together [使用verifyAll批量断言]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#specifications-as-documentation-specifications-%E6%96%87%E6%A1%A3%E6%8F%8F%E8%BF%B0"}},[t._v("Specifications as Documentation [Specifications 文档描述]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#extensions-%E6%89%A9%E5%B1%95"}},[t._v("Extensions [扩展]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#comparison-to-junit-%E4%B8%8E-junit-%E6%AF%94%E8%BE%83"}},[t._v("Comparison to JUnit [与 JUnit 比较]")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#data-driven-testing-%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8%E6%B5%8B%E8%AF%95"}},[t._v("Data Driven Testing [数据驱动测试]")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#introduction-%E4%BB%8B%E7%BB%8D"}},[t._v("Introduction [介绍]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#data-tables-%E6%95%B0%E6%8D%AE%E8%A1%A8"}},[t._v("Data Tables [数据表]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#isolated-execution-of-iterations-%E8%BF%AD%E4%BB%A3%E9%9A%94%E7%A6%BB%E6%89%A7%E8%A1%8C"}},[t._v("Isolated Execution of Iterations [迭代隔离执行]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#sharing-of-objects-between-iterations-%E8%BF%AD%E4%BB%A3%E5%85%B1%E4%BA%AB%E5%AF%B9%E8%B1%A1"}},[t._v("Sharing of Objects between Iterations [迭代共享对象]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#syntactic-variations-%E5%8F%98%E9%87%8F%E8%AF%AD%E6%B3%95%E7%B3%96"}},[t._v("Syntactic Variations [变量语法糖]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#reporting-of-failures-%E6%8A%A5%E5%91%8A%E5%A4%B1%E8%B4%A5"}},[t._v("Reporting of Failures [报告失败]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#method-unrolling-unroll-%E6%B3%A8%E8%A7%A3%E6%96%B9%E6%B3%95"}},[t._v("Method Unrolling [@Unroll 注解方法]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#data-pipes-%E6%95%B0%E6%8D%AE%E7%AE%A1%E9%81%93"}},[t._v("Data Pipes [数据管道]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#multi-variable-data-pipes-%E5%A4%9A%E5%8F%98%E9%87%8F%E6%95%B0%E6%8D%AE%E7%AE%A1%E9%81%93"}},[t._v("Multi-Variable Data Pipes [多变量数据管道]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#data-variable-assignment-%E6%95%B0%E6%8D%AE%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC"}},[t._v("Data Variable Assignment [数据变量赋值]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#combining-data-tables-data-pipes-and-variable-assignments-%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%AE%A1%E9%81%93%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%E7%BB%84%E5%90%88"}},[t._v("Combining Data Tables, Data Pipes, and Variable Assignments [数据表、数据管道、变量赋值组合]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#number-of-iterations-%E8%BF%AD%E4%BB%A3%E6%AC%A1%E6%95%B0"}},[t._v("Number of Iterations [迭代次数]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#closing-of-data-providers-%E5%85%B3%E9%97%AD%E6%95%B0%E6%8D%AE%E6%8F%90%E4%BE%9B%E8%80%85"}},[t._v("Closing of Data Providers [关闭数据提供者]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#more-on-unrolled-method-names-unrolled-%E6%96%B9%E6%B3%95%E5%90%8D"}},[t._v("More on Unrolled Method Names [Unrolled 方法名]")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#interaction-based-testing-%E5%9F%BA%E4%BA%8E%E4%BA%A4%E4%BA%92%E7%9A%84%E6%B5%8B%E8%AF%95"}},[t._v("Interaction Based Testing [基于交互的测试]")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#creating-mock-objects-%E5%88%9B%E5%BB%BAmock%E5%AF%B9%E8%B1%A1"}},[t._v("Creating Mock Objects [创建Mock对象]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#default-behavior-of-mock-objects-mock%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA"}},[t._v("Default Behavior of Mock Objects [Mock对象的默认行为]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#injecting-mock-objects-into-code-under-specification-%E6%B3%A8%E5%85%A5mock%E5%AF%B9%E8%B1%A1"}},[t._v("Injecting Mock Objects into Code Under Specification [注入Mock对象]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#mocking-%E6%A8%A1%E6%8B%9F"}},[t._v("Mocking [模拟]")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#interactions-%E4%BA%A4%E4%BA%92"}},[t._v("Interactions [交互]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#cardinality-%E4%BA%A4%E4%BA%92%E7%9A%84%E5%9F%BA%E6%95%B0"}},[t._v("Cardinality [交互的基数]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#target-constraint-%E7%9B%AE%E6%A0%87%E7%BA%A6%E6%9D%9F"}},[t._v("Target Constraint [目标约束]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#method-constraint-%E6%96%B9%E6%B3%95%E7%BA%A6%E6%9D%9F"}},[t._v("Method Constraint [方法约束]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#argument-constraints-%E5%8F%82%E6%95%B0%E7%BA%A6%E6%9D%9F"}},[t._v("Argument Constraints [参数约束]")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#equality-constraint-%E7%AD%89%E5%BC%8F%E7%BA%A6%E6%9D%9F"}},[t._v("Equality Constraint [等式约束]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#hamcrest-%E7%BA%A6%E6%9D%9F"}},[t._v("Hamcrest 约束")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#wildcard-constraint-%E9%80%9A%E9%85%8D%E7%AC%A6%E7%BA%A6%E6%9D%9F"}},[t._v("Wildcard Constraint [通配符约束]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#code-constraint-%E4%BB%A3%E7%A0%81%E7%BA%A6%E6%9D%9F"}},[t._v("Code Constraint [代码约束]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#negating-constraint-%E5%90%A6%E5%AE%9A%E7%BA%A6%E6%9D%9F"}},[t._v("Negating Constraint [否定约束]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#type-constraint-%E7%B1%BB%E5%9E%8B%E7%BA%A6%E6%9D%9F"}},[t._v("Type Constraint [类型约束]")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#matching-any-method-call-%E5%8C%B9%E9%85%8D%E4%BB%BB%E4%BD%95%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8"}},[t._v("Matching Any Method Call [匹配任何方法调用]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#strict-mocking-%E4%B8%A5%E6%A0%BC%E6%A8%A1%E6%8B%9F"}},[t._v("Strict Mocking [严格模拟]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#where-to-declare-interactions-%E5%9C%A8%E5%93%AA%E5%AE%9A%E4%B9%89%E4%BA%A4%E4%BA%92"}},[t._v("Where to Declare Interactions [在哪定义交互]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#declaring-interactions-at-mock-creation-time-%E5%88%9B%E5%BB%BAmock%E6%97%B6%E5%AE%9A%E4%B9%89%E4%BA%A4%E4%BA%92"}},[t._v("Declaring Interactions at Mock Creation Time [创建Mock时定义交互]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#grouping-interactions-with-same-target-%E5%AF%B9%E7%9B%B8%E5%90%8C%E7%9B%AE%E6%A0%87%E7%9A%84%E4%BA%A4%E4%BA%92%E8%BF%9B%E8%A1%8C%E5%88%86%E7%BB%84"}},[t._v("Grouping Interactions with Same Target [对相同目标的交互进行分组]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#mixing-interactions-and-conditions-%E6%B7%B7%E5%90%88-%E4%BA%A4%E4%BA%92%E4%B8%8E%E6%9D%A1%E4%BB%B6"}},[t._v("Mixing Interactions and Conditions [混合 交互与条件]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#explicit-interaction-blocks-%E6%98%BE%E5%BC%8F%E4%BA%A4%E4%BA%92%E5%9D%97"}},[t._v("Explicit Interaction Blocks [显式交互块]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#scope-of-interactions-%E4%BA%A4%E4%BA%92%E4%BD%9C%E7%94%A8%E8%8C%83%E5%9B%B4"}},[t._v("Scope of Interactions [交互作用范围]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#verification-of-interactions-%E4%BA%A4%E4%BA%92%E7%9A%84%E9%AA%8C%E8%AF%81"}},[t._v("Verification of Interactions [交互的验证]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#invocation-order-%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F-1"}},[t._v("Invocation Order [调用顺序]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#mocking-classes-%E6%A8%A1%E6%8B%9F%E7%B1%BB"}},[t._v("Mocking Classes [模拟类]")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#stubbing-%E6%A1%A9"}},[t._v("Stubbing [桩]")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#returning-fixed-values-%E8%BF%94%E5%9B%9E%E5%9B%BA%E5%AE%9A%E5%80%BC"}},[t._v("Returning Fixed Values [返回固定值]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#returning-sequences-of-values-%E8%BF%94%E5%9B%9E%E5%80%BC%E5%BA%8F%E5%88%97"}},[t._v("Returning Sequences of Values [返回值序列]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#computing-return-values-%E8%AE%A1%E7%AE%97%E8%BF%94%E5%9B%9E%E5%80%BC"}},[t._v("Computing Return Values [计算返回值]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#performing-side-effects-%E6%89%A7%E8%A1%8C%E7%9A%84%E5%89%AF%E4%BD%9C%E7%94%A8"}},[t._v("Performing Side Effects [执行的副作用]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#chaining-method-responses-%E6%96%B9%E6%B3%95%E5%93%8D%E5%BA%94%E9%93%BE"}},[t._v("Chaining Method Responses [方法响应链]")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#combining-mocking-and-stubbing-%E6%A8%A1%E6%8B%9F%E5%92%8C%E6%A1%A9%E7%9A%84%E7%BB%84%E5%90%88"}},[t._v("Combining Mocking and Stubbing [模拟和桩的组合]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#other-kinds-of-mock-objects-%E5%85%B6%E4%BB%96-mock-%E5%AF%B9%E8%B1%A1"}},[t._v("Other Kinds of Mock Objects [其他 Mock 对象]")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#stubs"}},[t._v("Stubs")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#spies"}},[t._v("Spies")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#partial-mocks-%E9%83%A8%E5%88%86-mocks"}},[t._v("Partial Mocks [部分 Mocks]")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#groovy-mocks"}},[t._v("Groovy Mocks")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#mocking-dynamic-methods"}},[t._v("Mocking Dynamic Methods")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#mocking-all-instances-of-a-type"}},[t._v("Mocking All Instances of a Type")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#mocking-constructors"}},[t._v("Mocking Constructors")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#mocking-static-methods"}},[t._v("Mocking Static Methods")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#advanced-features"}},[t._v("Advanced Features")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#a-la-carte-mocks"}},[t._v("A la Carte Mocks")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#detecting-mock-objects"}},[t._v("Detecting Mock Objects")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#further-reading"}},[t._v("Further Reading")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#extensions-%E6%89%A9%E5%B1%95%E6%9C%BA%E5%88%B6"}},[t._v("Extensions [扩展机制]")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#spock-configuration-file-spock-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6"}},[t._v("Spock Configuration File [Spock 配置文件]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#built-in-extensions-%E5%86%85%E5%BB%BA%E6%89%A9%E5%B1%95"}},[t._v("Built-In Extensions [内建扩展]")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#ignore"}},[t._v("Ignore")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#ignorerest"}},[t._v("IgnoreRest")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#ignoreif"}},[t._v("IgnoreIf")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#requires"}},[t._v("Requires")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#pendingfeature"}},[t._v("PendingFeature")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#stepwise"}},[t._v("Stepwise")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#timeout"}},[t._v("Timeout")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#retry"}},[t._v("Retry")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#use"}},[t._v("Use")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#confinemetaclasschanges"}},[t._v("ConfineMetaClassChanges")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#restoresystemproperties"}},[t._v("RestoreSystemProperties")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#autoattach"}},[t._v("AutoAttach")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#autocleanup"}},[t._v("AutoCleanup")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#title-and-narrative"}},[t._v("Title and Narrative")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#see"}},[t._v("See")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#issue"}},[t._v("Issue")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#subject"}},[t._v("Subject")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#rule"}},[t._v("Rule")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#classrule"}},[t._v("ClassRule")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#include-and-exclude"}},[t._v("Include and Exclude")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#optimize-run-order"}},[t._v("Optimize Run Order")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#report-log"}},[t._v("Report Log")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#third-party-extensions-%E7%AC%AC%E4%B8%89%E6%96%B9%E6%89%A9%E5%B1%95"}},[t._v("Third-Party Extensions [第三方扩展]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#writing-custom-extensions"}},[t._v("Writing Custom Extensions")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#global-extensions"}},[t._v("Global Extensions")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#annotation-driven-local-extensions"}},[t._v("Annotation Driven Local Extensions")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#configuration-objects"}},[t._v("Configuration Objects")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#interceptors-%E6%8B%A6%E6%88%AA%E5%99%A8"}},[t._v("Interceptors [拦截器]")])])])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#modules"}},[t._v("Modules")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#guice-module-%E4%B8%8Eguice-ioc%E5%AE%B9%E5%99%A8%E9%9B%86%E6%88%90"}},[t._v("Guice Module [与Guice IoC容器集成]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#spring-module--spring-%E6%A8%A1%E5%9D%97"}},[t._v("Spring Module  [Spring 模块 ]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#tapestry-module-%E4%B8%8Etapestry5-ioc%E5%AE%B9%E5%99%A8%E9%9B%86%E6%88%90"}},[t._v("Tapestry Module [与Tapestry5 IoC容器集成]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#unitils-module-%E4%B8%8Eunitils%E5%BA%93%E9%9B%86%E6%88%90"}},[t._v("Unitils Module [与Unitils库集成]")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#grails-module-grails-%E6%A8%A1%E5%9D%97"}},[t._v("Grails Module [Grails 模块]")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#release-notes"}},[t._v("Release Notes")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#migration-guide"}},[t._v("Migration Guide")])])])])]),t._v(" "),a("h2",{attrs:{id:"introduction-spock-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction-spock-介绍"}},[t._v("#")]),t._v(" Introduction [Spock 介绍]")]),t._v(" "),a("p",[t._v("Spock 是运用于 Java and Groovy 应用程序的测试框架。\n它美丽而富有表现力的规范说明语言使得它从众多的测试框架中脱颖而出。\n由于基于JUnit执行器，使得Spock与大多数IDE，构建工具和持续集成服务器保持兼容。\nSpock的灵感来自JUnit，jMock，RSpec，Groovy，Scala，Vulcans 和其他一些优秀的框架。")]),t._v(" "),a("h2",{attrs:{id:"getting-started-起步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getting-started-起步"}},[t._v("#")]),t._v(" Getting Started [起步]")]),t._v(" "),a("p",[t._v("这部分会展示 Spock 如何起步，可以说是比较简单的。")]),t._v(" "),a("h3",{attrs:{id:"spock-web-console-spock-在线控制台"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spock-web-console-spock-在线控制台"}},[t._v("#")]),t._v(" Spock Web Console [Spock 在线控制台]")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://meetspock.appspot.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spock Web Console"),a("OutboundLink")],1),t._v(" 是一个在线 查看、编辑、运行、发布 Spock 测试脚本的网站，\n它是一个不用做任何付出就能玩转Spock的完美场所。\n所以赶紧去运行一下 "),a("a",{attrs:{href:"http://meetspock.appspot.com/edit/9001",target:"_blank",rel:"noopener noreferrer"}},[t._v("“Hello, Spock!” "),a("OutboundLink")],1),t._v("吧！")]),t._v(" "),a("h3",{attrs:{id:"spock-example-project-spock-样例工程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spock-example-project-spock-样例工程"}},[t._v("#")]),t._v(" Spock Example Project [Spock 样例工程]")]),t._v(" "),a("p",[t._v("如果想在本地环境尝试 Spock，可以从 GitHub 下载"),a("a",{attrs:{href:"https://github.com/spockframework/spock-example",target:"_blank",rel:"noopener noreferrer"}},[t._v(" “ Spock Example Project”"),a("OutboundLink")],1),t._v("，\n它无需你做任何的设置，就可用使用 Ant，Gradle和Maven运行。\n使用一个简单的命令就可以使用Gradle启动或者在Eclipse和IDEA中运行。具体可以查看README文件中的详细介绍.")]),t._v(" "),a("h2",{attrs:{id:"spock-primer-spock-进阶"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spock-primer-spock-进阶"}},[t._v("#")]),t._v(" Spock Primer [Spock 进阶]")]),t._v(" "),a("p",[t._v("本章假定你有一定的 Groovy 和 单元测试 基础。\n如果你是一个Java开发者而没有听说过 Groovy，别担心 —— 你会觉得 Groovy 十分熟悉。\n事实上，Groovy一个主要的设计目标就是成为与Java兼容的脚本语言。\n只要你查阅下 "),a("a",{attrs:{href:"http://groovy-lang.org/documentation.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Groovy 官方文档"),a("OutboundLink")],1),t._v("，你就会喜欢上它。")]),t._v(" "),a("p",[t._v("本章的目标是教会你编写一些真实的 Spock 描述脚本（specification），并激起你更大的兴趣。")]),t._v(" "),a("p",[t._v("参考：")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://groovy-lang.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Groovy"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Unit_testing",target:"_blank",rel:"noopener noreferrer"}},[t._v("单元测试"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"terminology-术语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#terminology-术语"}},[t._v("#")]),t._v(" Terminology [术语]")]),t._v(" "),a("p",[t._v("首先让我们来做一些定义：Spock 让你编写 描述性脚本 来描述 某个被测系统的期望功能（属性、性质）。\n被测系统可以是一个类或一个应用，也被称为 基于描述的系统（system under specification or SUS）。\n对于一个功能的描述从SUS及其协作者的特定快照开始;此快照被称为这个功能的 fixture。")]),t._v(" "),a("p",[t._v("以下部分将引导你完成可能组成Spock描述脚本的所有构建块。典型描述性脚本一般仅使用它们的子集。")]),t._v(" "),a("h3",{attrs:{id:"imports-导入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#imports-导入"}},[t._v("#")]),t._v(" Imports [导入]")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("spock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("*\n")])])]),a("p",[t._v("包 spock.lang 包含了编写描述性脚本的大部分重要的类。")]),t._v(" "),a("h3",{attrs:{id:"specification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specification"}},[t._v("#")]),t._v(" Specification")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyFirstSpecification")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Specification")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fields")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fixture methods")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// feature methods")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// helper methods")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("一个 Specification 对应于一个 Groovy 类，这个类必须继承 spock.lang.Specification。\n测试描述的按照它所描述的功能来命名。\n例如：CustomerSpec, H264VideoPlayback, and ASpaceshipAttackedFromTwoSides，\n对于一个测试描述这些都是合理的命名。")]),t._v(" "),a("p",[t._v("测试描述类通常包含许多对于编写描述性脚本有用的方法，同时它也指明了 JUnit 如何 Sputnik 来运行描述性脚本。\nSputnik 使得 Spock specifications 可以运行于 大多数现代 Java 集成开发环境 和 构建工具。")]),t._v(" "),a("h3",{attrs:{id:"fields-变量字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fields-变量字段"}},[t._v("#")]),t._v(" Fields [变量字段]")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassUnderSpecification")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" coll "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collaborator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Shared")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VeryExpensiveResource")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("有时你可能需要在几个功能方法之间共享对象。\n例如，对象创建很昂贵时，或者你需要功能方法之间有交互。这时可以使用 @Shared 标记字段。\n最好能在定义字段的同时初始化。（从语义上讲，这相当于在setupSpec（）方法的最开始初始化字段。）")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" PI "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.141592654")]),t._v("\n")])])]),a("p",[t._v("静态字段应用只用于常量，共享字段是最优的选择，因为他们对共享语法的定义更明确。")]),t._v(" "),a("h3",{attrs:{id:"fixture-methods-固定方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fixture-methods-固定方法"}},[t._v("#")]),t._v(" Fixture Methods [固定方法]")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setupSpec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// runs once -  before the first feature method")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// runs before every feature method")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cleanup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// runs after every feature method")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cleanupSpec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// runs once -  after the last feature method")]),t._v("\n")])])]),a("p",[t._v("固定方法（Fixture Methods）负责配置或清除测试环境。\n通常最好为每个功能方法都增加 setup() and cleanup() 固定方法。")]),t._v(" "),a("p",[t._v("所有的固定方法都是可选的。")]),t._v(" "),a("p",[t._v("有时候，多个功能方法共享一个 Fixture 是有意义的，通过共享字段和setupSpec()、cleanupSpec() 方法的结合来实现。\n注意，setupSpec() 和 cleanupSpec() 方法中不能引用实例字段，除它们非被 @Shared 标记。")]),t._v(" "),a("h4",{attrs:{id:"invocation-order-调用顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#invocation-order-调用顺序"}},[t._v("#")]),t._v(" Invocation Order [调用顺序]")]),t._v(" "),a("p",[t._v("如果在子类中重写了 setUp()方法，父类的setup（）将在子类的setup（）之前运行。\n而 cleanup() 则是相反的，子类cleanup()将先执行。\nsetupSpec() 和 setUp()一致，cleanupSpec()和cleanup()一致。\n不需要显式调用super.setup（）或super.cleanup（），因为Spock将默认会按照继承的层次结构查找和执行fixture方法。")]),t._v(" "),a("p",[t._v("调用顺序：\nsuper.setupSpec\nsub.setupSpec\nsuper.setup\nsub.setup\nfeature method\nsub.cleanup\nsuper.cleanup\nsub.cleanupSpec\nsuper.cleanupSpec")]),t._v(" "),a("h3",{attrs:{id:"feature-methods-功能方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#feature-methods-功能方法"}},[t._v("#")]),t._v(" Feature Methods [功能方法]")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"pushing an element on the stack"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// blocks go here (块结构)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Feature methods 是 specification 的核心。它描述了你期望的系统功能，一般情况下用一个字符串来命名。\n可以使用你喜欢的任意字符为 Feature methods 取一个最合适的名字。")]),t._v(" "),a("p",[t._v("从概念上讲，一种 Feature method 包括四个阶段：")]),t._v(" "),a("ol",[a("li",[t._v("Set up")]),t._v(" "),a("li",[t._v("为被测对象提供一个激励（stimulus）")]),t._v(" "),a("li",[t._v("描述期望的响应")]),t._v(" "),a("li",[t._v("Clean up")])]),t._v(" "),a("p",[t._v("第一个和第四个阶段是可选的，除非是在交互式Feature Method中，否则第二、三个阶段一般都存在，并且有可能出现不止一次。")]),t._v(" "),a("h4",{attrs:{id:"blocks-块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blocks-块"}},[t._v("#")]),t._v(" Blocks [块]")]),t._v(" "),a("p",[t._v("Spock 内置支持 Feature method 的每个阶段。为此，Feature method 被结构化为 多个块结构。\n块结构以一个标签开始，并延伸到下一个块结构开始或方法的结尾。\n有6种块结构：\ngiven, when, then, expect, cleanup, where\n方法开头和第一个显式块之间的任何语句都属于隐式 given 块。")]),t._v(" "),a("p",[t._v("Feature method 必须至少有一个显式（即标记）块。\n实际上，显式块的存在才使得一个方法成为 feature method。块将方法划分为不同的部分，并且不能嵌套。")]),t._v(" "),a("p",[a("img",{attrs:{src:"_pic/Spock-blocks-phases.png",alt:""}})]),t._v(" "),a("p",[t._v("上图展示了块 和 各个 概率阶段 的映射，where 块比较特别，后续你会看到，我们先来详细了解下其他块。")]),t._v(" "),a("ul",[a("li",[t._v("Given Blocks (given 块结构)")])]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("given:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" stack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" elem "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"push me"')]),t._v("\n")])])]),a("p",[t._v("given块 是为要描述的功能进行设置的地方。在它之前可能没有其它块，也可能不会重复。\ngiven块 没有任何特殊的语义。\ngiven: 标志可以省略，从而产生一个隐式的given块。\n期初，别名 setup:是首选的块名称，但是使用 given: 常常更能得到一个更可读的  Feature method 描述。\n(参考 "),a("a",{attrs:{href:"#specifications-as-documentation"}},[t._v("Specifications as Documentation")]),t._v(")")]),t._v(" "),a("ul",[a("li",[t._v("When and Then Blocks")])]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// stimulus")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// response")]),t._v("\n")])])]),a("p",[t._v("when 和 then 块常常一起出现，它们描述了一个 stimulus 和一个期望的响应。\n而when块可能包含任意代码时，then 块仅限于条件，异常条件，交互和变量定义。\n一个 feature method 可能包含多组 when-then。")]),t._v(" "),a("ul",[a("li",[t._v("Conditions\n条件（Conditions ）描述一个期望的状态，比较像JUnit的断言。\n但是，条件是作为普通布尔表达式编写的，不需要断言API。\n（更确切地说，条件也可能产生非布尔值，然后根据Groovy真值进行评估。）\n让我们看一些conditions的实例：")])]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\nstack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("empty\nstack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nstack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("peek")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" elem\n")])])]),a("p",[t._v("小建议 :\n尽量保持每个Feature method的较少的条件。1-5个是一个很好的实践。\n如果多于这个范围，问问自己是否一次指定了多个不相关的功能。如果是的，则需要对 feature method  进行分解。\n如果你的条件仅在值上有所不同，请考虑使用"),a("a",{attrs:{href:"#data-tables-%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%A0%BC"}},[t._v("数据表")]),t._v("。")]),t._v(" "),a("p",[t._v("如果违反条件，Spock会提供什么样的反馈？\n让我们来尝试改变第二个条件为 stack.size() == 2，以下是结果：")]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("Condition not satisfied:\n\nstack.size() == 2\n|     |      |\n|     1      false\n[push me]\n")])])]),a("p",[t._v("你会看到，在验证条件期间，Spock会捕获产生的所有值，并以易读的形式呈现它们。看起来很不错，是不是？")]),t._v(" "),a("ul",[a("li",[a("ul",[a("li",[t._v("Implicit and explicit conditions 隐式和显式条件")])])])]),t._v(" "),a("p",[t._v("条件是then块和expect块的基本要素。\n除了调用 void方法 和 被分类为交互的表达式 之外，这些块中的所有顶级表达式都被隐式地视为条件。\n要在其他地方使用条件，需要使用Groovy的assert关键字指定它们：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  stack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("empty\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("如果一个显式条件被违反，它将产生与隐式条件相同的良好的诊断消息。")]),t._v(" "),a("ul",[a("li",[a("ul",[a("li",[t._v("Exception Conditions 异常条件")])])])]),t._v(" "),a("p",[t._v("异常条件用于描述when块应该抛出异常。它们使用thrown()方法定义，传入预期的异常类型。\n例如，如果从空堆弹出元素，应该抛出 EmptyStackException，要描述这个场景，可以编写以下内容：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\nstack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("thrown")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EmptyStackException"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nstack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("empty\n")])])]),a("p",[t._v("你看到，异常条件可能会跟随其他条件（甚至其他块），这对于具体说明异常的预期内容特别有用。\n要访问异常，首先将其绑定到变量：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\nstack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("thrown")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EmptyStackException"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ne"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cause "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" null\n")])])]),a("p",[t._v("或者可以对上面的语法做一些改变：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\nstack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\nEmptyStackException e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("thrown")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ne"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cause "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" null\n")])])]),a("p",[t._v("上面的语法有两个小优点：\n首先，异常变量是强类型的，这使IDE更容易提供代码补全。\n其次，条件语句读起来更像一个句子（'然后 一个 EmptyStackException 异常被抛出'）。\n请注意，如果没有向thrown()方法传递异常类型，则从左侧的变量类型推断出它。")]),t._v(" "),a("p",[t._v("有时候我们需要传达不应该抛出异常，例如，让我们尝试表示HashMap应该接受一个空键：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"HashMap accepts null key"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("setup:")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("null"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"elem"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("以上的方法有效，但没有透露代码的意图。\nDid someone just leave the building before he had finished implementing this method?\n条件在哪里？实际上可以做的更好：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"HashMap accepts null key"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("given:")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\n  map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("null"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"elem"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("notThrown")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NullPointerException"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("通过使用 notThrown()，使得对 NullPointerException 异常不应该被抛出的描述更加清晰。\n（根据Map.put()的契约，对于不支持 null 值作为键的map，这样描述条件是正确的做法。）[？？？]\n然而，如果Map.put()抛出任何其他异常，该方法还是会失败。")]),t._v(" "),a("ul",[a("li",[a("ul",[a("li",[t._v("Interactions")])])])]),t._v(" "),a("p",[t._v("条件描述对象的状态，而交互则描述对象如何相互通信。\n交互和基于交互的测试在单独的章节中描述，因此我们仅在此给出一个快速示例：\n假设我们想要描述从发布者到其订阅者的事件流。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"events are published to all subscribers"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("given:")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" subscriber1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Mock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" subscriber2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Mock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" publisher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Publisher")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  publisher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subscriber1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  publisher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subscriber2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\n  publisher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fire")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"event"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"event"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"event"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("Expect Blocks")])]),t._v(" "),a("p",[t._v("expect块比 then 块更有限，因为它可能只包含条件和变量定义。\n在单个表达式中描述 stimulus 和 预期响应 情况下，expect 块非常有用，它的表述会更自然。\n例如，比较以下两次描述 Math.max() 方法：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("expect:")]),t._v("\nMath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])]),a("p",[t._v("尽管两个代码片段在语义上是等效的，但第二种表述显然更合适。\n作为指导原则，一般使用when-then来描述具有副作用的方法，而 expect 用来描述纯粹的功能方法。")]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("建议： 利用像any（）和every（）这样的 Groovy JDK 方法来创建更具表现力和简洁的条件。\n")])])]),a("ul",[a("li",[t._v("Cleanup Blocks")])]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("given:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" file "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("File")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"/some/path"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nfile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createNewFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("cleanup:")]),t._v("\nfile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("cleanup 块后面只能有where块，并且可能不会重复。\n和 cleanup 方法一样，它被用户释放 feature method 使用的任何资源。\n即使 在 cleanup 块 前面的 某个 feature method 部分产生了异常，cleanup 块也会运行。\n因此必须对 cleanup 块进行防御性编码，在最坏的情况下，它必须优雅地处理feature method中的\n第一个语句抛出异常的情况，并且所有局部变量仍然具有其默认值。")]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("提示：Groovy的安全解除引用运算符（foo？.bar（））简化了编写防御性代码的过程。\n")])])]),a("p",[t._v("对象级 specifications 通常不需要清理方法，因为它们使用的唯一资源是内存，它由垃圾收集器自动回收。\n但是，更粗粒度的 specifications 可能会使用clean块来清理文件系统，关闭数据库连接或关闭网络服务。")]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("如果规范的设计方式使其所有要素方法都需要相同的资源，请使用cleanup（）方法;否则，更喜欢清理块。\n相同的权衡适用于setup（）方法和给定的块。\n")])])]),a("ul",[a("li",[t._v("Where Blocks")])]),t._v(" "),a("p",[t._v("where块 始终位于方法的最后，并且可能不会重复。它用于编写数据驱动的特征方法。\n为了让你了解如何完成此操作，请查看以下示例：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"computing the maximum of two numbers"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("expect:")]),t._v("\n  Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" c\n\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("where:")]),t._v("\n  a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这个 where块 有效地创建了 feature method 的两个“版本”：一个是a是5，b是1，c是5，另一个a是3，b是9，c是9。\n虽然 where块 是在最后声明的，但是是在包含它的 feature method 运行之前评估的。\nwhere块 会在数据驱动测试章节中进一步说明。")]),t._v(" "),a("h3",{attrs:{id:"helper-methods-辅助方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#helper-methods-辅助方法"}},[t._v("#")]),t._v(" Helper Methods [辅助方法]")]),t._v(" "),a("p",[t._v("有时，feature method 会变大而包含大量重复代码。在这种情况下，引入一个或多个辅助方法是有意义的。\n辅助方法的两个好选择是 setup/cleanup 逻辑 和 复杂条件。前者比较简单，让我们来看看复杂条件：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"offered PC matches preferred configuration"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" pc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" shop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("buyPc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n  pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vendor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Sunny"')]),t._v("\n  pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("clockRate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2333")]),t._v("\n  pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ram "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4096")]),t._v("\n  pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("os "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Linux"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("如果你恰好是计算机爱好者，你喜欢的PC配置可能非常详细，或者你可能想要比较来自许多不同商店的优惠。\n因此，让我们分解出条件：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"offered PC matches preferred configuration"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" pc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" shop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("buyPc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matchesPreferredConfiguration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matchesPreferredConfiguration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vendor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Sunny"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("clockRate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2333")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ram "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4096")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("os "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Linux"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("新的辅助方法 matchesPreferredConfiguration（）返回一个布尔表达式的结果。(return 关键字在Groovy中是可选的。)\n这很好，除了给出的结果不够明确：")]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("Condition not satisfied:\n\nmatchesPreferredConfiguration(pc)\n|                             |\nfalse \n")])])]),a("p",[t._v("这不是很有帮助。幸运的是，我们可以做得更好：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("matchesPreferredConfiguration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vendor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Sunny"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("clockRate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2333")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ram "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4096")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("os "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Linux"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("将条件分解为辅助方法时，需要考虑两点：\n首先，必须使用assert关键字将隐式条件转换为显式条件。\n其次，辅助方法必须具有返回类型void。否则，Spock可能会将返回值解释为失败条件，这不是我们想要的。")]),t._v(" "),a("p",[t._v("正如期望，改进的辅助方法告诉我们详细的出错信息：")]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("Condition not satisfied:\n\nassert pc.clockRate >= 2333\n       |  |         |\n       |  1666      false\n       ...\n")])])]),a("p",[t._v("最后的建议：尽管代码重用通常是件好事，但不要太过度。\n请注意，使用fixture和helper方法会增加 feature methods 之间的耦合。\n如果重用过多或错误的代码，specifications 会变得难以维护和修改。")]),t._v(" "),a("h3",{attrs:{id:"using-with-for-expectations-使用-with-处理期望"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-with-for-expectations-使用-with-处理期望"}},[t._v("#")]),t._v(" Using with for expectations [使用 with 处理期望]")]),t._v(" "),a("p",[t._v("作为上述辅助方法的替代，可以使用with（target，closure）方法与待校验对象上进行交互，这在 then 和 expect 块中特别有用。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"offered PC matches preferred configuration"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" pc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" shop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("buyPc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("with")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    vendor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Sunny"')]),t._v("\n    clockRate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2333")]),t._v("\n    ram "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("406")]),t._v("\n    os "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Linux"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("与使用辅助方法时不同，不需要显式的断言语句来进行正确的错误报告。")]),t._v(" "),a("p",[t._v("当验证 mock 时，with语句也可以避免冗长的验证语句。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" service "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Mock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Service"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// has start(), stop(), and doWork() methods")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" app "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Application")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("service"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// controls the lifecycle of the service")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\napp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("with")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("service"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("有时IDE会很难确定目标的类型，在这种情况下，可以使用 with(target，type，closure) 来手动指定目标类型。")]),t._v(" "),a("h3",{attrs:{id:"using-verifyall-to-assert-multiple-expectations-together-使用verifyall批量断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-verifyall-to-assert-multiple-expectations-together-使用verifyall批量断言"}},[t._v("#")]),t._v(" Using verifyAll to assert multiple expectations together [使用verifyAll批量断言]")]),t._v(" "),a("p",[t._v("一般情况下，在第一次断言失败时我们就认为测试失败。\n但有时候，在测试失败之前收集更多断言的失败信息是有帮助的，这种行为也称为（soft assertions）软断言。")]),t._v(" "),a("p",[t._v("verifyAll 的使用方式和 with 类似：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"offered PC matches preferred configuration"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" pc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" shop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("buyPc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("verifyAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    vendor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Sunny"')]),t._v("\n    clockRate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2333")]),t._v("\n    ram "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("406")]),t._v("\n    os "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Linux"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("verifyAll 也可以不用绑定验证目标：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("​"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("expect:")]),t._v("\n  verifyAll "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n")])])]),a("p",[t._v("verifyAll 与 with 一样，也可以选择为IDE定义类型提示。")]),t._v(" "),a("h3",{attrs:{id:"specifications-as-documentation-specifications-文档描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#specifications-as-documentation-specifications-文档描述"}},[t._v("#")]),t._v(" Specifications as Documentation [Specifications 文档描述]")]),t._v(" "),a("p",[t._v("精心编写的 Specifications 是宝贵的信息来源。\n特别是高规格的 Specifications 不仅仅是开发人员（架构师，领域专家，客户等），而是面向更广泛受众的。\n不仅仅从 Specifications的名字 和 功能 来提供信息，而以自然语言提供更多信息是有意义的。\n因此，Spock提供了一种将文本描述附加到块的方法：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("given:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"open a database connection"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// code goes here")]),t._v("\n")])])]),a("p",[t._v("用 and: 标签描述在逻辑上不相同的块（block）的各个部分。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("given:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"open a database connection"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// code goes here")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("and:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"seed the customer table"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// code goes here")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("and:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"seed the product table"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// code goes here")]),t._v("\n")])])]),a("p",[t._v("可以在 feature method 的任何（顶层）位置，利用and:插入一段描述，这不会更改feature method的语义。\n在BDD（Behavior Driven Development）中，面向客户的功能（称为故事）使用 given-when-then 格式描述。\nSpock使用 given: 标签直接支持这种说明风格：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("given:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"an empty bank account"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"the account is credited '),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")])]),t._v('"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v("\"the account's balance is "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")])]),t._v('"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n")])])]),a("p",[t._v("块描述不仅存在于源代码中，还可用于Spock运行时。\n规划好块描述能够增强诊断信息，以及所有利益相关者具有共同理解的文本报告。")]),t._v(" "),a("h3",{attrs:{id:"extensions-扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extensions-扩展"}},[t._v("#")]),t._v(" Extensions [扩展]")]),t._v(" "),a("p",[t._v("正如我们所看到的，Spock提供了许多用于编写 Specification 的功能。\n除了这些功能，Spock还提供了一种基于拦截的扩展机制。\n扩展由称为指令（directives）的注释激活。目前，Spock支持以下指令注释：")]),t._v(" "),a("ul",[a("li",[t._v("@Timeout\n为 feature or fixture method 设置执行的超时时间。")]),t._v(" "),a("li",[t._v("@Ignore\n忽略带有此注解的任何 feature method。")]),t._v(" "),a("li",[t._v("@IgnoreRest\n将执行携带此注解的任何 feature method，忽略其他 feature methods。\n对于快速运行单个方法很有用。")]),t._v(" "),a("li",[t._v("@FailsWith\n期望一个 feature method 突然完成。\n@FailsWith有两个使用场景：\n第一，记录无法立即解决的已知错误。\n第二，在某些 异常 conditions的无法使用的情况下（比如指定异常conditions的行为），使用 @FailsWith 作为替代。\n在所有其他情况下，异常 conditions 更合适。")])]),t._v(" "),a("p",[a("a",{attrs:{href:"#extensions-1"}},[t._v("Extensions")]),t._v("章节讲解了如何自定义 指令注解 和 扩展。")]),t._v(" "),a("h3",{attrs:{id:"comparison-to-junit-与-junit-比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparison-to-junit-与-junit-比较"}},[t._v("#")]),t._v(" Comparison to JUnit [与 JUnit 比较]")]),t._v(" "),a("p",[t._v("虽然Spock使用不同的术语，但它的许多概念和特性都受到JUnit的启发。\n以下是一个粗略的比较：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Specification")]),t._v(" "),a("th",[t._v("Test class")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("setup()")]),t._v(" "),a("td",[t._v("@Before")])]),t._v(" "),a("tr",[a("td",[t._v("cleanup()")]),t._v(" "),a("td",[t._v("@After")])]),t._v(" "),a("tr",[a("td",[t._v("setupSpec()")]),t._v(" "),a("td",[t._v("@BeforeClass")])]),t._v(" "),a("tr",[a("td",[t._v("cleanupSpec()")]),t._v(" "),a("td",[t._v("@AfterClass")])]),t._v(" "),a("tr",[a("td",[t._v("Feature")]),t._v(" "),a("td",[t._v("Test")])]),t._v(" "),a("tr",[a("td",[t._v("Feature method")]),t._v(" "),a("td",[t._v("Test method")])]),t._v(" "),a("tr",[a("td",[t._v("Data-driven feature")]),t._v(" "),a("td",[t._v("Theory")])]),t._v(" "),a("tr",[a("td",[t._v("Condition")]),t._v(" "),a("td",[t._v("Assertion")])]),t._v(" "),a("tr",[a("td",[t._v("Exception condition")]),t._v(" "),a("td",[t._v("@Test(expected=…​)")])]),t._v(" "),a("tr",[a("td",[t._v("Interaction")]),t._v(" "),a("td",[t._v("Mock expectation (e.g. in Mockito)")])])])]),t._v(" "),a("h2",{attrs:{id:"data-driven-testing-数据驱动测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-driven-testing-数据驱动测试"}},[t._v("#")]),t._v(" Data Driven Testing [数据驱动测试]")]),t._v(" "),a("p",[t._v("通常，我们会使用不同的输入和预期结果，多次运行相同的测试代码。\nDDT也成为了Spock最重要的功能之一。")]),t._v(" "),a("h3",{attrs:{id:"introduction-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introduction-介绍"}},[t._v("#")]),t._v(" Introduction [介绍]")]),t._v(" "),a("p",[t._v("假设我们要指定Math.max方法的行为：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MathSpec")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Specification")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"maximum of two numbers"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("expect:")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// exercise math method for a few different inputs")]),t._v("\n    Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n    Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n    Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("场景简单时，这种实现方式很好，但它也有一些潜在的缺点：")]),t._v(" "),a("ol",[a("li",[t._v("代码和数据是耦合的，不能独立修改")]),t._v(" "),a("li",[t._v("数据无法轻易地自动生成或从外部数据源提取")]),t._v(" "),a("li",[t._v("为了多次执行相同的代码，必须将其复制或提取到单独的方法中")]),t._v(" "),a("li",[t._v("如果发生失败，可能无法立即清楚地知道哪些输入导致失败")]),t._v(" "),a("li",[t._v("多次执行相同的代码不会获得像单独隔离执行那样的好处。")])]),t._v(" "),a("p",[t._v("Spock数据驱动测试功能试图解决这些问题。让我们将代码重构为数据驱动的 feature method。\n首先，我们引入三个方法参数（称为数据变量）来替换硬编码的整数值：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MathSpec")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Specification")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"maximum of two numbers"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("expect:")]),t._v("\n    Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" c\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("我们已经完成了测试逻辑，但仍然需要提供数据值。\n这是在where：块中完成的，它始终位于方法的末尾。在最简单（也是最常见）的情况下，where：块会包含数据表。")]),t._v(" "),a("h3",{attrs:{id:"data-tables-数据表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-tables-数据表"}},[t._v("#")]),t._v(" Data Tables [数据表]")]),t._v(" "),a("p",[t._v("数据表是使用一组固定数据集来运行 feature method 的便捷方法：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MathSpec")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Specification")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"maximum of two numbers"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("expect:")]),t._v("\n    Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" c\n\n    "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("where:")]),t._v("\n    a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" c\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("该表的第一行称为表头，它声明了数据变量。后续行（称为表行）包含相应的值。\n针对每一行数据，feature method 将执行一次;我们称之为方法的迭代。\n如果迭代失败，仍将执行剩余的迭代，最后将报告所有故障。")]),t._v(" "),a("p",[t._v("数据表必须至少有两列。单列表可以写成：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("where:")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v("\n")])])]),a("h3",{attrs:{id:"isolated-execution-of-iterations-迭代隔离执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isolated-execution-of-iterations-迭代隔离执行"}},[t._v("#")]),t._v(" Isolated Execution of Iterations [迭代隔离执行]")]),t._v(" "),a("p",[t._v("迭代与单独隔离执行 feature method 的方式相同，每次迭代彼此隔离，都会获得自己的规范类实例，\n并且将分别在每次迭代之前和之后调用setup和cleanup方法。")]),t._v(" "),a("h3",{attrs:{id:"sharing-of-objects-between-iterations-迭代共享对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sharing-of-objects-between-iterations-迭代共享对象"}},[t._v("#")]),t._v(" Sharing of Objects between Iterations [迭代共享对象]")]),t._v(" "),a("p",[t._v("对象必须保存在@Shared或静态字段中，才能在迭代之间共享。")]),t._v(" "),a("p",[a("em",[a("strong",[t._v("注意")])]),t._v("\n只能在where：块中访问@Shared和static变量。")]),t._v(" "),a("p",[t._v("请注意，这些对象也将与其他方法共享。目前没有很好的方法只在同一方法的迭代之间共享对象。\n如果你认为这是一个问题，请考虑将每个方法放入一个单独的 Specification 中，这些 Specifications 可以保存在同一个文件中。\n这样可以以某些样板代码为代价实现更好的隔离。")]),t._v(" "),a("h3",{attrs:{id:"syntactic-variations-变量语法糖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syntactic-variations-变量语法糖"}},[t._v("#")]),t._v(" Syntactic Variations [变量语法糖]")]),t._v(" "),a("p",[t._v("以前的代码可以通过几种方式进行调整。\n首先，由于where：块已经声明了所有数据变量，因此可以省略方法参数。\n其次，输入和预期输出可以用双管符号（||）分开，以便在视觉上有所区分。\n经过调整之后的代码为：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MathSpec")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Specification")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"maximum of two numbers"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("expect:")]),t._v("\n    Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" c\n\n    "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("where:")]),t._v("\n    a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" c\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"reporting-of-failures-报告失败"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reporting-of-failures-报告失败"}},[t._v("#")]),t._v(" Reporting of Failures [报告失败]")]),t._v(" "),a("p",[t._v("假设max方法的实现有一个缺陷，其中一个迭代会失败：")]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("maximum of two numbers   FAILED\n\nCondition not satisfied:\n\nMath.max(a, b) == c\n    |    |  |  |  |\n    |    7  4  |  7\n    42         false\n")])])]),a("p",[t._v("显而易见的问题是：哪个迭代失败了，它的数据值是多少？\n在我们的示例中，不难发现它是第二次失败的迭代。在其他时候，则很难甚至无法确认。\n因此，如果Spock不是仅仅报告失败，而能明确说明哪个迭代失败就更好了，这是@Unroll注释的目的。")]),t._v(" "),a("h3",{attrs:{id:"method-unrolling-unroll-注解方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#method-unrolling-unroll-注解方法"}},[t._v("#")]),t._v(" Method Unrolling [@Unroll 注解方法]")]),t._v(" "),a("p",[t._v("使用@Unroll注解的方法将独立报告其迭代：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Unroll")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"maximum of two numbers"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n")])])]),a("ul",[a("li",[t._v("为什么方法不默认设置为 @Unroll？")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("一个原因是某些执行环境（特别是IDE）期望被提前告知待测试方法的数量，如果实际数量有变化可能会出现某些问题。\n另一个原因是@Unroll可能大大增加了需要报告的测试数量，这并不总是可取的。\n")])])]),a("p",[t._v("请注意，unrolling 改变报告，对方法的执行方式没有任何影响。依赖执行环境，输出将类似于：")]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("maximum of two numbers[0]   PASSED\nmaximum of two numbers[1]   FAILED\n\nMath.max(a, b) == c\n    |    |  |  |  |\n    |    7  4  |  7\n    42         false\n\nmaximum of two numbers[2]   PASSED\n")])])]),a("p",[t._v("这告诉我们第二次迭代（索引为1）失败。\n只需要一点小小的改动，我们可以做得更好：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Unroll")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"maximum of #a and #b is #c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n")])])]),a("p",[t._v("此方法名称使用占位符（由前导哈希符号（＃）表示）来引用数据变量a，b和c。\n在输出中，占位符将替换为具体值：")]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("maximum of 3 and 5 is 5   PASSED\nmaximum of 7 and 4 is 7   FAILED\n\nMath.max(a, b) == c\n    |    |  |  |  |\n    |    7  4  |  7\n    42         false\n\nmaximum of 0 and 0 is 0   PASSED\n")])])]),a("p",[t._v("现在我们可以一目了然地看出输入7和4的最大方法失败了。")]),t._v(" "),a("p",[t._v("如果想对这部分内容有更多的了解，可以参考 "),a("a",{attrs:{href:"#more-on-unrolled-method-names"}},[t._v("More on Unrolled Method Names")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"data-pipes-数据管道"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-pipes-数据管道"}},[t._v("#")]),t._v(" Data Pipes [数据管道]")]),t._v(" "),a("p",[t._v("数据表不是向数据变量提供值的唯一方法。实际上，数据表只是一个或多个数据管道的语法糖：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("where:")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("由左移（<<）运算符指示的数据管道将数据变量连接到数据提供者。数据提供者保存变量所有的值，每个迭代一个。\n任何 Groovy 支持的可迭代对象都可以用作数据提供者。\n包括Collection，String，Iterable类型的对象，以及实现 Iterable 契约的对象。\n数据提供者不一定必须是数据（如集合），他们也可以从数据源（如文本文件，数据库和电子表格，或随机生成数据）获取数据。\n数据提供者仅在需要时（在下一次迭代之前）用于查询下一个值。")]),t._v(" "),a("h3",{attrs:{id:"multi-variable-data-pipes-多变量数据管道"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multi-variable-data-pipes-多变量数据管道"}},[t._v("#")]),t._v(" Multi-Variable Data Pipes [多变量数据管道]")]),t._v(" "),a("p",[t._v("如果数据提供者每次迭代返回多个值（Groovy 支持的可迭代对象），它就可以同时连接到多个数据变量。\n语法有点类似于Groovy多重赋值，但需要用中括号替代小括号：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Shared")]),t._v(" sql "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Sql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"jdbc:h2:mem:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"org.h2.Driver"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"maximum of two numbers"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("expect:")]),t._v("\n  Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" c\n\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("where:")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" sql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rows")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"select a, b, c from maxdata"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n可以使用下划线（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v("）忽略不感兴趣的数据值：\n```groovy\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("where:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" sql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rows")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"select * from maxdata"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"data-variable-assignment-数据变量赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-variable-assignment-数据变量赋值"}},[t._v("#")]),t._v(" Data Variable Assignment [数据变量赋值]")]),t._v(" "),a("p",[t._v("数据变量可以直接赋值：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("where:")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\nc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" b\n")])])]),a("p",[t._v("每次迭代都会重新评估分配。如上所示，赋值的右侧可能引用其他数据变量：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("where:")]),t._v("\nrow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" sql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rows")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"select * from maxdata"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pick apart columns")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" row"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" row"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b\nc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" row"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c\n")])])]),a("h3",{attrs:{id:"combining-data-tables-data-pipes-and-variable-assignments-数据表、数据管道、变量赋值组合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#combining-data-tables-data-pipes-and-variable-assignments-数据表、数据管道、变量赋值组合"}},[t._v("#")]),t._v(" Combining Data Tables, Data Pipes, and Variable Assignments [数据表、数据管道、变量赋值组合]")]),t._v(" "),a("p",[t._v("可以根据需要组合数据表，数据管道和变量分配：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("where:")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v("\n\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\nc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" b\n")])])]),a("h3",{attrs:{id:"number-of-iterations-迭代次数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number-of-iterations-迭代次数"}},[t._v("#")]),t._v(" Number of Iterations [迭代次数]")]),t._v(" "),a("p",[t._v("迭代次数取决于可用的数据量。连续执行相同的方法可以产生不同数量的迭代。\n如果数据提供者比其使用者更早耗尽值，则会发生异常。\n变量赋值不会影响迭代次数。其中：仅包含赋值的块只产生一次迭代。")]),t._v(" "),a("h3",{attrs:{id:"closing-of-data-providers-关闭数据提供者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#closing-of-data-providers-关闭数据提供者"}},[t._v("#")]),t._v(" Closing of Data Providers [关闭数据提供者]")]),t._v(" "),a("p",[t._v("完成所有迭代后，将对所有数据提供程序调用零参数close方法。")]),t._v(" "),a("h3",{attrs:{id:"more-on-unrolled-method-names-unrolled-方法名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#more-on-unrolled-method-names-unrolled-方法名"}},[t._v("#")]),t._v(" More on Unrolled Method Names [Unrolled 方法名]")]),t._v(" "),a("p",[t._v("展开的方法名称类似于Groovy GString，但以下区别除外：")]),t._v(" "),a("ol",[a("li",[t._v("表达式用＃而不是$ 表示，并且${...}语法没有等价物。")]),t._v(" "),a("li",[t._v("表达式仅支持属性访问和零arg方法调用。")])]),t._v(" "),a("p",[t._v("给定Person类，具有性名称和年龄属性，以及Person类型的数据变量person，以下是有效的方法名称：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"#person is #person.age years old"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// property access")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"#person.name.toUpperCase()"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// zero-arg method call")]),t._v("\n")])])]),a("p",[t._v("根据Groovy语义，非字符串值（如上面的#person）将转换为字符串。")]),t._v(" "),a("p",[t._v("以下是无效的方法名称：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v("\"#person.name.split(' ')[1]\"")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cannot have method arguments")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"#person.age / 2"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cannot use operators")]),t._v("\n")])])]),a("p",[t._v("如有必要，可以引入其他数据变量来保存更复杂的表达式：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"#lastName"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// zero-arg method call")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("where:")]),t._v("\n  person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Phil Cole'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  lastName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"interaction-based-testing-基于交互的测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interaction-based-testing-基于交互的测试"}},[t._v("#")]),t._v(" Interaction Based Testing [基于交互的测试]")]),t._v(" "),a("p",[t._v("基于交互的测试是一种设计和测试技术，在2000年初出现在极限编程（XP）社区中。\n它着眼于对象的行为而不是它们的状态，它探讨了 specification 中的对象如何通过方法调用与其协作者进行交互。")]),t._v(" "),a("p",[t._v("例如，假设我们有一个发布者向其订阅者发送消息：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Publisher")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Subscriber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" subscribers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" messageCount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    subscribers"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    messageCount"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Subscriber")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PublisherSpec")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Specification")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Publisher")]),t._v(" publisher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Publisher")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("我们如何测试Publisher？通过基于状态的测试，我们可以验证发布者是否追踪到其订阅者。\n然而，更有趣的问题是订阅者是否收到发布者发送的消息。\n要回答这个问题，我们需要一个特殊的Subscriber实现，它可以监听发布者与其订阅者之间的对话。\n这种实现称为模拟（mock）对象。")]),t._v(" "),a("p",[t._v("我们当然可以手动创建Subscriber的模拟实现，但是随着方法数量和交互复杂性的增加，编写和维护此代码会变得令人不快。\n这就是模拟框架由来：它们提供了一种方法来描述specification下的对象与其协作者之间的预期交互，\n并且可以生成协作者的模拟实现，用来验证这些期望。")]),t._v(" "),a("ul",[a("li",[t._v("如何生成模拟实现？")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("与大多数Java模拟框架一样，Spock使用 JDK动态代理（模拟接口时）和 Byte Buddy 或 CGLIB代理（模拟类时）在运行时生成模拟实现。\n与基于Groovy元编程的实现相比，这个实现的优势在于，同样可用于测试Java代码。\n")])])]),a("p",[t._v("Java世界不乏流行和成熟的模拟框架，仅举几例：\n"),a("a",{attrs:{href:"http://jmock.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JMock"),a("OutboundLink")],1),t._v("，"),a("a",{attrs:{href:"http://easymock.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("EasyMock"),a("OutboundLink")],1),t._v("，"),a("a",{attrs:{href:"https://site.mockito.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mockito"),a("OutboundLink")],1),t._v("。\n虽然这些工具中的每一个都可以与Spock一起使用，但出于希望利用Groovy的功能来使得基于交互的测试更容易编写，更易读，最终更有趣，\nSpock 决定推出自己的模拟框架，与 Spock 的specification 语言紧密集成。\n希望在本章结束时，你能认为 Spock 已经实现了这些目标。")]),t._v(" "),a("p",[t._v("除非另有说明，否则Spock模拟框架的所有功能都可用于测试Java和Groovy代码。")]),t._v(" "),a("h3",{attrs:{id:"creating-mock-objects-创建mock对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-mock-objects-创建mock对象"}},[t._v("#")]),t._v(" Creating Mock Objects [创建Mock对象]")]),t._v(" "),a("p",[t._v("模拟对象是使用MockingApi.Mock()方法创建的。让我们创建两个模拟订阅者：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" subscriber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Mock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" subscriber2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Mock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("也支持以下类似Java的语法，这可能会提供更好的IDE支持：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Subscriber")]),t._v(" subscriber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Subscriber")]),t._v(" subscriber2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("这里的mock的类型是从赋值左侧的变量类型推断出来的。")]),t._v(" "),a("ul",[a("li",[t._v("注意")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("如果模拟的类型在赋值的左侧给出，则允许（尽管不是必需的）在右侧省略它。\n")])])]),a("p",[t._v("模拟对象实际上实现（或者，在类的情况下，扩展）了它们所代表的类型。换句话说，在示例中，subscriber is-a Subscriber。\n因此，它可以传递给期望此类型的静态类型（Java）代码。")]),t._v(" "),a("h3",{attrs:{id:"default-behavior-of-mock-objects-mock对象的默认行为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#default-behavior-of-mock-objects-mock对象的默认行为"}},[t._v("#")]),t._v(" Default Behavior of Mock Objects [Mock对象的默认行为]")]),t._v(" "),a("ul",[a("li",[t._v("Lenient vs. Strict Mocking Frameworks 宽松与严格的模拟框架")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("像 Mockito 一样，我们坚信默认情况下，模拟框架应该是宽松的。\n这意味着允许对模拟对象进行意外的方法调用（或者换句话说，与手头测试无关的交互），并使用默认响应进行回答。\n相反，默认情况下，如EasyMock和JMock模拟框架是严格的，并为每个意外的方法调用抛出异常。\n虽然严格会更严谨，但也可能导致过度规范，每当其他内部代码更改，就会导致脆弱的测试失败。 \nSpock的模拟框架可以很容易地仅描述与交互相关的内容，避免过度规范的陷阱。\n")])])]),a("p",[t._v("最初，模拟对象没有行为。允许对它们调用方法，但除了针对方法的返回类型（false，0或null）返回默认值之外没有任何效果。\nObject.equals，Object.hashCode和Object.toString方法是一个例外，具有以下默认行为：\n模拟对象仅等于自身，具有唯一的哈希代码，以及一个字符串表示，字符串包含了模拟对象所代表类型的名字。\n通过 stubbing 可以覆盖此默认行为，我们将在"),a("a",{attrs:{href:"#stubbing"}},[t._v("Stubbing")]),t._v("部分中了解这些方法。")]),t._v(" "),a("h3",{attrs:{id:"injecting-mock-objects-into-code-under-specification-注入mock对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#injecting-mock-objects-into-code-under-specification-注入mock对象"}},[t._v("#")]),t._v(" Injecting Mock Objects into Code Under Specification [注入Mock对象]")]),t._v(" "),a("p",[t._v("在创建发布者及其订阅者之后，我们需要让后者为前者所知：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PublisherSpec")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Specification")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Publisher")]),t._v(" publisher "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Publisher")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Subscriber")]),t._v(" subscriber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Subscriber")]),t._v(" subscriber2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  def "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    publisher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("subscribers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" subscriber "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// << is a Groovy shorthand for List.add()")]),t._v("\n    publisher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("subscribers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" subscriber2\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("我们现在准备描述双方之间预期的互动。")]),t._v(" "),a("h3",{attrs:{id:"mocking-模拟"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mocking-模拟"}},[t._v("#")]),t._v(" Mocking [模拟]")]),t._v(" "),a("p",[t._v("模拟是描述 specification 下的对象与其协作者之间（强制）交互的行为。一个例子：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"should send messages to all subscribers"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\n  publisher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("大声朗读：“当发布者发送'hello'消息时，两个订阅者都应该只接收一次该消息”。")]),t._v(" "),a("p",[t._v("运行此 feature method 时，执行when块时发生的模拟对象上的所有调用都将与then：块中描述的交互进行匹配。\n如果不满足其中一个交互，则抛出InteractionNotSatisfiedError或其子类类型的异常。此验证自动进行，无需任何其他代码。")]),t._v(" "),a("h4",{attrs:{id:"interactions-交互"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interactions-交互"}},[t._v("#")]),t._v(" Interactions [交互]")]),t._v(" "),a("ul",[a("li",[t._v("Is an Interaction Just a Regular Method Invocation? 交互只是一个常规的方法调用吗？")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("不完全是。\n虽然交互看起来类似于常规方法调用，但它只是用来表达预期会发生哪些方法调用。\n理解交互的一个好的方法是作为正则表达式，模拟对象上的所有传入调用都与之匹配。\n根据具体情况，交互可以匹配零个，一个或多个调用。\n")])])]),a("p",[t._v("让我们仔细看看then：块。\n它包含两个交互，每个交互分四个不同的部分：基数，目标约束，方法约束和参数约束")]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v('1 * subscriber.receive("hello")\n|   |          |       |\n|   |          |       argument constraint 参数约束\n|   |          method constraint 方法约束\n|   target constraint 目标约束\ncardinality 基数\n')])])]),a("h4",{attrs:{id:"cardinality-交互的基数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cardinality-交互的基数"}},[t._v("#")]),t._v(" Cardinality [交互的基数]")]),t._v(" "),a("p",[t._v("交互的基数描述了预期方法调用的频率。它可以是固定数字或范围：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// exactly one call")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// zero calls")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// between one and three calls (inclusive)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// at least one call")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// at most three calls")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// any number of calls, including zero")]),t._v("\n                                     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (rarely needed; see 'Strict Mocking')")]),t._v("\n")])])]),a("h4",{attrs:{id:"target-constraint-目标约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#target-constraint-目标约束"}},[t._v("#")]),t._v(" Target Constraint [目标约束]")]),t._v(" "),a("p",[t._v("交互的目标约束描述了预期哪个模拟对象接收方法调用：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a call to 'subscriber'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a call to any mock object")]),t._v("\n")])])]),a("h4",{attrs:{id:"method-constraint-方法约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#method-constraint-方法约束"}},[t._v("#")]),t._v(" Method Constraint [方法约束]")]),t._v(" "),a("p",[t._v("交互的方法约束描述了预期调用哪种方法：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a method named 'receive'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string regex"}},[t._v("/r.*e/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a method whose name matches the given regular expression")]),t._v("\n                                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (here: method name starts with 'r' and ends in 'e')")]),t._v("\n")])])]),a("p",[t._v("当期望调用getter方法时，可以使用Groovy属性语法而不是方法语法：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("status "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// same as: 1 * subscriber.getStatus()")]),t._v("\n")])])]),a("p",[t._v("当期望调用setter方法时，只能使用方法语法：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setStatus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"ok"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// NOT: 1 * subscriber.status = "ok"')]),t._v("\n")])])]),a("h4",{attrs:{id:"argument-constraints-参数约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#argument-constraints-参数约束"}},[t._v("#")]),t._v(" Argument Constraints [参数约束]")]),t._v(" "),a("p",[t._v("交互的参数约束描述了期望的方法参数：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// an argument that is equal to the String "hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// an argument that is unequal to the String "hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the empty argument list (would never match in our example)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// any single argument (including null)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// any argument list (including the empty argument list)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("null"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// any non-null argument")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// any non-null argument that is-a String")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("endsWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"lo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// any non-null argument that is-a String")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// an argument that satisfies the given predicate, meaning that")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// code argument constraints need to return true of false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// depending on whether they match or not")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (here: message length is greater than 3 and contains the character a)")]),t._v("\n")])])]),a("p",[t._v("对于具有多个参数的方法，参数约束按预期工作：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("invoke")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"ls"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"-a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("null"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"abcdefghiklmnopqrstuwx1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("在处理vararg方法时，vararg语法也可用于相应的交互：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VarArgSubscriber")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v(" messages"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n\nsubscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"goodbye"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v("Spock Deep Dive：Groovy Varargs 深入Spock：Groovy的不定参数")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("Groovy 允许以不定参数样式调用最后一个参数是数组类型的方法。因此，不定参数语法也可用于匹配此类方法的交互。\n")])])]),a("h5",{attrs:{id:"equality-constraint-等式约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#equality-constraint-等式约束"}},[t._v("#")]),t._v(" Equality Constraint [等式约束]")]),t._v(" "),a("p",[t._v("等式约束使用groovy相等来检查参数，即argument == constraint。\n可以使用以下方式作为一个平等约束：")]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("any literal 1 "),a("span",{pre:!0,attrs:{class:"token italic"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token content"}},[t._v(" check('string') / 1 ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("*")])]),t._v(" check(1) / 1 * check(null),\n\na variable 1 * check(var),\n\na list or map literal 1 "),a("span",{pre:!0,attrs:{class:"token italic"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token content"}},[t._v(" check([1]) / 1 ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("*")])]),t._v(" check([foo: 'bar']),\n\nan object 1 * check(new Person('sam')),\n\nor the result of a method call 1 * check(person())\n")])])]),a("h5",{attrs:{id:"hamcrest-约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hamcrest-约束"}},[t._v("#")]),t._v(" Hamcrest 约束")]),t._v(" "),a("p",[t._v("是等式约束的变体，如果约束对象是 Hamcrest 匹配器，那么它将使用该匹配器来检查参数。")]),t._v(" "),a("h5",{attrs:{id:"wildcard-constraint-通配符约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wildcard-constraint-通配符约束"}},[t._v("#")]),t._v(" Wildcard Constraint [通配符约束]")]),t._v(" "),a("p",[t._v("通配符约束将匹配包括 null 在内的任何参数。\n即1 * subscriber.receive（）。\n还有扩展通配符约束* _，它匹配任意数量的参数1 * subscriber.receive（* _），包括没有参数。")]),t._v(" "),a("h5",{attrs:{id:"code-constraint-代码约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#code-constraint-代码约束"}},[t._v("#")]),t._v(" Code Constraint [代码约束]")]),t._v(" "),a("p",[t._v("代码约束是最通用的。它是一个groovy闭包，这个闭包 gets the argument as its parameter.\n闭包被视为条件块，因此它的行为类似于then块，即每一行都被视为隐式断言。\n它可以模拟除扩展通配符约束之外的所有约束，但建议尽可能使用更简单的约束。\n可以执行多个断言，调用断言方法或与/ verifyAll一起使用。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("verifyAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    firstname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'William'")]),t._v("\n    lastname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Kirk'")]),t._v("\n    age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("45")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h5",{attrs:{id:"negating-constraint-否定约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#negating-constraint-否定约束"}},[t._v("#")]),t._v(" Negating Constraint [否定约束]")]),t._v(" "),a("p",[t._v("否定约束！是一个复合约束，即它需要与另一个约束相结合才能工作。它反转嵌套约束的结果。\n例如，1 * subscriber.receive（！null）是检查null的等式约束的组合，\n然后是反转结果的否定约束，将其转换为非null。")]),t._v(" "),a("p",[t._v("虽然它可以与任何其他约束结合，但它并不总是有意义的，例如，1 * subscriber.receive（！_）将不匹配。\n还要记住，非匹配否定约束的诊断只是内部约束确实匹配，而没有任何更多信息。")]),t._v(" "),a("h5",{attrs:{id:"type-constraint-类型约束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type-constraint-类型约束"}},[t._v("#")]),t._v(" Type Constraint [类型约束]")]),t._v(" "),a("p",[t._v("类型约束检查参数的类型/类，它也是复合约束。它通常把 “_ as Type”，它是通配符约束和类型约束的组合。\n你也可以将它与其他约束相结合，1 * subscriber.receive（{it.contains（'foo'）} as String）\n在执行代码约束之前断言它是一个String，以检查它是否包含foo。")]),t._v(" "),a("h4",{attrs:{id:"matching-any-method-call-匹配任何方法调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#matching-any-method-call-匹配任何方法调用"}},[t._v("#")]),t._v(" Matching Any Method Call [匹配任何方法调用]")]),t._v(" "),a("p",[t._v("在某种意义上，有时候匹配“任何东西”会很有用：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// any method on subscriber, with any argument list")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// shortcut for and preferred over the above")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_._")]),t._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// any method call on any mock object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v("                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// shortcut for and preferred over the above")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注意")])]),t._v(" "),a("div",{staticClass:"language-nd extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" 虽然(..)* .(*_) >>_是一个有效的交互声明，但它既不是好的风格，也不是特别有用。\n")])])]),a("h4",{attrs:{id:"strict-mocking-严格模拟"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#strict-mocking-严格模拟"}},[t._v("#")]),t._v(" Strict Mocking [严格模拟]")]),t._v(" "),a("p",[t._v("什么时候Matching Any Method Call才有用？\n一个很好的例子是严格模拟，除了那些明确声明的交互之外，它不允许任何交互：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\npublisher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("publish")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// demand one 'receive' call on 'subscriber'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" auditing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// allow any interaction with 'auditing'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v("                           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// don't allow any other interaction")]),t._v("\n")])])]),a("p",[t._v("0* 仅作为then：块或方法的最后一次交互才有意义。注意使用_ *（任意数量的调用），它允许与审计组件进行任何交互。")]),t._v(" "),a("ul",[a("li",[t._v("注意")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[a("span",{pre:!0,attrs:{class:"token italic"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token content"}},[t._v(" * 仅在严格模拟的情况下才有意义。特别是，在Stubbing调用时永远不需要。\n例如，")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("_")])]),t._v(" * auditing.record() >> 'ok'可以（并且应该！）简化为auditing.record() >> 'ok'。\n")])])]),a("h4",{attrs:{id:"where-to-declare-interactions-在哪定义交互"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#where-to-declare-interactions-在哪定义交互"}},[t._v("#")]),t._v(" Where to Declare Interactions [在哪定义交互]")]),t._v(" "),a("p",[t._v("到目前为止，我们在then：block中声明了所有的交互，通常这样做会使 Specification 更易读。\n但是，实际上也允许将交互放在when：block之前的任何位置。这意味着可以在setup方法中声明交互。\n交互也可以在同一规 Specification类 的任何“helper”实例方法中声明。")]),t._v(" "),a("p",[t._v("当对模拟对象进行调用时，它将按照交互声明时的顺序进行匹配。\n如果调用与多个交互匹配，当交互尚未达到其调用限制的上限时，最早声明的交互将获胜。\n此规则有一个例外：在then：block中声明的交互在任何其他交互之前匹配。\n这就允许 then：块 中申明的交互可以 覆盖 setup中的。")]),t._v(" "),a("ul",[a("li",[t._v("Spock Deep Dive: How Are Interactions Recognized? 深入Spock：交互如何被识别")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("换句话说，是什么使表达式成为交互声明，而不是常规方法调用？ \n\nSpock使用简单的语法规则来识别交互：\n如果表达式处于语句位置并且是乘法（*）或右移（>>, >>>）操作，那么它将被视为交互并将相应地进行解析。\n\n这样的表达在语句位置几乎没有价值（注：这样的表达作为常规表达式一般不会在语句位置使用），所以改变它的意思会工作的更好。\n注意操作是如何对应于声明基数（当Mocking时）或响应生成器（当Stubbing时）的语法的。\n他们中的任何一个都必须永远存在，Spock 永远不会将单独的foo.bar() 视为互动。\n")])])]),a("h4",{attrs:{id:"declaring-interactions-at-mock-creation-time-创建mock时定义交互"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#declaring-interactions-at-mock-creation-time-创建mock时定义交互"}},[t._v("#")]),t._v(" Declaring Interactions at Mock Creation Time [创建Mock时定义交互]")]),t._v(" "),a("p",[t._v("如果模拟具有一组不变的“基础”交互，则可以在模拟创建时声明它们")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("Subscriber subscriber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Mock "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"goodbye"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("此功能对于Stubbing和专用"),a("a",{attrs:{href:"#stubs"}},[t._v("Stubs")]),t._v("特别有吸引力。\n请注意，这时的交互不会（也不能）具有目标约束，从上下文中可以清楚地看出它们属于哪个模拟对象。")]),t._v(" "),a("p",[t._v("使用mock初始化实例字段时，也可以声明交互：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MySpec")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Specification")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Subscriber subscriber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Mock "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"goodbye"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"grouping-interactions-with-same-target-对相同目标的交互进行分组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grouping-interactions-with-same-target-对相同目标的交互进行分组"}},[t._v("#")]),t._v(" Grouping Interactions with Same Target [对相同目标的交互进行分组]")]),t._v(" "),a("p",[t._v("共享相同目标的交互可以在Specification.with块中分组。\n与模拟创建时声明交互类似，这使得不必重复目标约束：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("with")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"goodbye"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("with块也可用于对具有相同目标的条件进行分组。")]),t._v(" "),a("h4",{attrs:{id:"mixing-interactions-and-conditions-混合-交互与条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mixing-interactions-and-conditions-混合-交互与条件"}},[t._v("#")]),t._v(" Mixing Interactions and Conditions [混合 交互与条件]")]),t._v(" "),a("p",[t._v("then块可以包含交互和条件。虽然不是严格要求，但习惯上一般在条件之前声明交互：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\npublisher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npublisher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("messageCount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),a("p",[t._v("大声朗读：“当发布者发送'hello'消息时，订阅者应该只接收一次消息，并且发布者的消息计数应为1”。")]),t._v(" "),a("h4",{attrs:{id:"explicit-interaction-blocks-显式交互块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#explicit-interaction-blocks-显式交互块"}},[t._v("#")]),t._v(" Explicit Interaction Blocks [显式交互块]")]),t._v(" "),a("p",[t._v("在内部，Spock必须在有关预期交互发生之前获得其完整信息。\n那么如何在then：block中声明交互呢？\n答案是，在引擎盖下，Spock将在then：block中交互的声明移动 when:block之前。\n在大多数情况下，这很好，但有时它会导致问题：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\npublisher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("这里我们为预期的参数引入了一个变量。（同样，我们可以为基数引入一个变量。）\n但是，Spock不会知道交互本质上是与变量声明相关联。\n因此它只会移动交互，这将在运行时导致 MissingPropertyException。")]),t._v(" "),a("p",[t._v("解决此问题的一种方法是将（至少）变量声明移动到when：block之前。\n（数据驱动测试的粉丝可能会将变量移动到where：block。）\n在我们的示例中，这将带来额外的好处，我们可以使用相同的变量来发送消息。")]),t._v(" "),a("p",[t._v("另一个解决方案是明确变量声明和交互属于一起的事实：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\npublisher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\ninteraction "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("由于MockingApi.interaction块总是整体移动，因此代码现在可以按预期工作。")]),t._v(" "),a("h4",{attrs:{id:"scope-of-interactions-交互作用范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scope-of-interactions-交互作用范围"}},[t._v("#")]),t._v(" Scope of Interactions [交互作用范围]")]),t._v(" "),a("p",[t._v("在then：块中声明的交互的作用范围为when：block之前：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\npublisher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"message1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"message1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\npublisher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"message2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"message2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("这确保订阅者在执行第一个when：block期间接收'message1'，在执行第二个when：block时接收'message2'。")]),t._v(" "),a("p",[t._v("在then：block之外声明的交互在声明时激活，直到 feature method 结尾。")]),t._v(" "),a("p",[t._v("交互始终作用于特定的feature method。\n因此，它们不能在静态方法，setupSpec方法或cleanupSpec方法中声明。同样，模拟对象不应存储在静态或@Shared字段中。")]),t._v(" "),a("h4",{attrs:{id:"verification-of-interactions-交互的验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#verification-of-interactions-交互的验证"}},[t._v("#")]),t._v(" Verification of Interactions [交互的验证]")]),t._v(" "),a("p",[t._v("基于模拟的测试有两种主要方式可以失败：\n交互可以匹配比允许的更多的调用，或者它可以匹配比所需更少的调用。\n在调用发生时检测到前一种情况，并导致TooManyInvocationsError：")]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("Too many invocations for:\n\n2 * subscriber.receive(_) (3 invocations)\n")])])]),a("p",[t._v("为了更容易诊断太多调用匹配的原因，Spock将显示与所讨论的交互相匹配的所有调用：")]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("Matching invocations (ordered by last occurrence):\n\n2 "),a("span",{pre:!0,attrs:{class:"token italic"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token content"}},[t._v(' subscriber.receive("hello")   <-- this triggered the error\n1 ')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("*")])]),t._v(' subscriber.receive("goodbye")\n')])])]),a("p",[t._v("根据此输出，其中一个receive（'hello'）调用触发了TooManyInvocationsError。\n请注意，无法区分的调用（如subscriber.receive（'hello'）的两次调用）被聚合到一行输出中，\n因此第一次接收（'hello'）可能在接收（'goodbye'）之前发生。")]),t._v(" "),a("p",[t._v("第二种情况（比所需的调用次数少）只能在执行when块完成后才能检测到。\n（在此之前，可能仍会发生进一步的调用。）它会导致TooFewInvocationsError：")]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v('Too few invocations for:\n\n1 * subscriber.receive("hello") (0 invocations)\n')])])]),a("p",[t._v("注意，该方法有没有被调用实际上并不重要，\n使用不同的参数调用相同的方法，在不同的模拟对象上调用相同的方法，或者将另一个方法称为“替代”此方法。\n以上任何一种情况，都会发生TooFewInvocationsError错误。")]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("Unmatched invocations (ordered by similarity):\n\n1 "),a("span",{pre:!0,attrs:{class:"token italic"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token content"}},[t._v(' subscriber.receive("goodbye")\n1 ')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("*")])]),t._v(' subscriber2.receive("hello")\n')])])]),a("h4",{attrs:{id:"invocation-order-调用顺序-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#invocation-order-调用顺序-2"}},[t._v("#")]),t._v(" Invocation Order [调用顺序]")]),t._v(" "),a("p",[t._v("通常，确切的方法调用顺序是相对的，并且可能随时间而变化。\n为避免过度规范，Spock默认允许任何调用顺序，前提是最终满足指定的交互：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"goodbye"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v('任何调用序列 "hello" "hello" "goodbye", "hello" "goodbye" "hello",  "goodbye" "hello" "hello"\n都能满足声明的交互。')]),t._v(" "),a("p",[t._v("在调用顺序很重要的情况下，可以通过将交互分成多个then：块来强制交互顺序：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"goodbye"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("现在，Spock将明确在“goodbye”之前收到两个“hello”。\n换句话说，调用顺序在then之间是强制的，但在then：blocks不是。")]),t._v(" "),a("ul",[a("li",[t._v("注意")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("使用and: 拆分then：block 不会强制任何顺序，因为and：仅用于文档目的，不带任何语义。\n")])])]),a("h4",{attrs:{id:"mocking-classes-模拟类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mocking-classes-模拟类"}},[t._v("#")]),t._v(" Mocking Classes [模拟类]")]),t._v(" "),a("p",[t._v("除了接口，Spock还支持模拟类。\n模拟类就像模拟接口一样工作，唯一的额外要求是在类路径上放置cglib-nodep-2.2或更高版本以及objenesis-1.2或更高版本。\n如果类路径中缺少这些库中的任何一个，Spock会通知你。")]),t._v(" "),a("ul",[a("li",[t._v("注意")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("CGLIB 从3.2.0开始支持Java 8\n")])])]),a("h3",{attrs:{id:"stubbing-桩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stubbing-桩"}},[t._v("#")]),t._v(" Stubbing [桩]")]),t._v(" "),a("p",[t._v("Stubbing是让协作者以某种方式响应方法调用的行为。\n在对方法进行stubbing时，你不关心该方法的调用次数和是否被调用。\n你只是希望它在被调用时返回一些值，或者执行一些副作用。")]),t._v(" "),a("p",[t._v("为了以下示例，让我们修改订阅者的receive方法，以返回一个状态代码，告知订阅者是否能够处理消息：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Subscriber")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("现在，让我们在每次调用时使receive方法返回'ok'：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"ok"')]),t._v("\n")])])]),a("p",[t._v("大声朗读：“每当订阅者收到消息时，请回复'确定'”。")]),t._v(" "),a("p",[t._v("与模拟交互相比，stubbing 交互在左端没有基数，但在右端添加了响应生成器：")]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v('subscriber.receive(_) >> "ok"\n|          |       |     |\n|          |       |     response generator\n|          |       argument constraint\n|          method constraint\ntarget constraint\n')])])]),a("p",[t._v("stubbing 交互可以在then：块内，或者在when：block之前的任何位置声明。\n（有关详细信息，请参阅"),a("a",{attrs:{href:"#where-to-declare-interactions"}},[t._v("Where to Declare Interactions")]),t._v("。）\n如果模拟对象仅用于stubbing，则通常在模拟创建时或given：块中声明交互。")]),t._v(" "),a("h4",{attrs:{id:"returning-fixed-values-返回固定值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returning-fixed-values-返回固定值"}},[t._v("#")]),t._v(" Returning Fixed Values [返回固定值]")]),t._v(" "),a("p",[t._v("我们已经看到使用right-shift（）运算符来返回一个固定值。\n要为不同的调用返回不同的值，请使用多个交互：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"message1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"ok"')]),t._v("\nsubscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"message2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"fail"')]),t._v("\n")])])]),a("p",[t._v("每当收到“message1”时，这将返回“ok”，并且每当收到“message2”时返回“fail”。\n如果它们与方法声明的返回类型兼容，则可以返回哪些值没有限制。")]),t._v(" "),a("h4",{attrs:{id:"returning-sequences-of-values-返回值序列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returning-sequences-of-values-返回值序列"}},[t._v("#")]),t._v(" Returning Sequences of Values [返回值序列]")]),t._v(" "),a("p",[t._v("要在连续调用时返回不同的值，请使用triple-right-shift（）运算符：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"ok"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"error"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"error"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"ok"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("这将为第一次调用返回'ok'，对第二次和第三次调用返回'error'，对所有剩余的调用返回'ok'。\n右侧必须是Groovy知道如何迭代的值，在这个例子中，我们使用了一个普通的列表。")]),t._v(" "),a("h4",{attrs:{id:"computing-return-values-计算返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#computing-return-values-计算返回值"}},[t._v("#")]),t._v(" Computing Return Values [计算返回值]")]),t._v(" "),a("p",[t._v("要根据方法的参数计算返回值，请使用right-shift（）运算符和闭包。\n如果闭包声明了一个无类型参数，它将传递方法的参数列表：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" args "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"ok"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"fail"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("如果消息长度超过三个字符，则返回“ok”，否则返回“fail”。")]),t._v(" "),a("p",[t._v("在大多数情况下，直接访问方法的参数会更方便。\n如果闭包声明了多个参数或单个类型参数，则方法参数将逐个映射到闭包参数：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" String message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"ok"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"fail"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("此响应生成器的行为与前一个相同，但可以说更具可读性。")]),t._v(" "),a("p",[t._v("如果你发现自己需要有关方法调用的更多信息而不是其参数，请查看org.spockframework.mock.IMockInvocation。\n此接口中声明的所有方法都在闭包内部可用，无需为它们添加前缀。\n（在Groovy术语中，闭包委托给IMockInvocation的一个实例。）")]),t._v(" "),a("h4",{attrs:{id:"performing-side-effects-执行的副作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#performing-side-effects-执行的副作用"}},[t._v("#")]),t._v(" Performing Side Effects [执行的副作用]")]),t._v(" "),a("p",[t._v("有时你可能想做的不仅仅是计算返回值，典型的例子是抛出异常。闭包再次拯救我们：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InternalError")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"ouch"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("当然，闭包可以包含更多代码，例如println语句。每次传入调用与交互匹配时都会执行它。")]),t._v(" "),a("h4",{attrs:{id:"chaining-method-responses-方法响应链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chaining-method-responses-方法响应链"}},[t._v("#")]),t._v(" Chaining Method Responses [方法响应链]")]),t._v(" "),a("p",[t._v("方法响应可以链接：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"ok"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"fail"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"ok"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InternalError")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"ok"')]),t._v("\n")])])]),a("p",[t._v("这将为前三次调用返回'ok'，'fail'，'ok'，为第四次调用返回InternalError，并为任何进一步的调用返回ok。")]),t._v(" "),a("h3",{attrs:{id:"combining-mocking-and-stubbing-模拟和桩的组合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#combining-mocking-and-stubbing-模拟和桩的组合"}},[t._v("#")]),t._v(" Combining Mocking and Stubbing [模拟和桩的组合]")]),t._v(" "),a("p",[t._v("Mocking and Stubbing 是相辅相成的")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"message1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"ok"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"message2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"fail"')]),t._v("\n")])])]),a("p",[t._v("同一方法调用的 Mocking and stubbing 必须在同一个交互中进行。\n特别是，以下 Mockito 风格将 Mocking and Stubbing 拆分为两个单独的语句将不起作用：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("given:")]),t._v("\nsubscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"message1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"ok"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\npublisher"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"message1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"message1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("正如在"),a("a",{attrs:{href:"#where-to-declare-interactions"}},[t._v("Where to Declare Interactions")]),t._v("中所解释的那样，receive 调用将首先与then：块中的交互匹配。\n由于该交互未指定响应，因此将返回返回类型的默认值（在本例中为null）。\n(This is just another facet of Spock’s lenient approach to mocking.).因此，given：block中的交互永远不会有机会匹配。")]),t._v(" "),a("ul",[a("li",[t._v("注意")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("同一方法调用的 Mocking and stubbing 必须在同一个交互中进行。\n")])])]),a("h3",{attrs:{id:"other-kinds-of-mock-objects-其他-mock-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#other-kinds-of-mock-objects-其他-mock-对象"}},[t._v("#")]),t._v(" Other Kinds of Mock Objects [其他 Mock 对象]")]),t._v(" "),a("p",[t._v("到目前为止，我们已经使用MockingApi.Mock方法创建了模拟对象。\n除了这个方法之外，MockingApi类还提供了一些其他工厂方法来创建更专业的模拟对象。")]),t._v(" "),a("h4",{attrs:{id:"stubs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stubs"}},[t._v("#")]),t._v(" Stubs")]),t._v(" "),a("p",[t._v("使用MockingApi.Stub工厂方法创建Stubs。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("Subscriber subscriber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Stub")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("模拟可以用于 stubbing and mocking ，而stub只能用于stubbing。\n将协作者限制为 stub 将其角色传达给规范的读者。")]),t._v(" "),a("ul",[a("li",[t._v("注意")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("如果stub调用与强制交互匹配（如1 * foo.bar（）），则抛出InvalidSpecException。\n")])])]),a("p",[t._v("像模拟一样，Stub允许意外调用。但是，在这种情况下，存根返回的值更加雄心勃勃：")]),t._v(" "),a("ol",[a("li",[t._v("对于基本类型，返回基元类型的默认值。")]),t._v(" "),a("li",[t._v("对于非原始数值（例如BigDecimal），返回零。")]),t._v(" "),a("li",[t._v("对于非数值，返回“空”或“虚拟”对象。\n这可能意味着一个空String，一个空集合，一个从其默认构造函数构造的对象，或另一个返回默认值的stub。\n有关详细信息，请参阅org.spockframework.mock.EmptyOrDummyResponse类。")])]),t._v(" "),a("ul",[a("li",[t._v("注意")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("如果方法的响应类型是最终类，或者如果它需要类模拟库并且cglib或ByteBuddy不可用，\n那么'dummy'对象创建将失败并出现CannotCreateMockException。\n")])])]),a("p",[t._v("Stub 通常具有一组固定的交互，这使得"),a("a",{attrs:{href:"#declaring-interactions-at-mock-creation-time"}},[t._v("Declaring Interactions at Mock Creation Time")]),t._v("特别有吸引力：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("Subscriber subscriber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Stub "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"message1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"ok"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"message2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"fail"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"spies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spies"}},[t._v("#")]),t._v(" Spies")]),t._v(" "),a("p",[t._v("（在使用此功能之前请三思。更改规范下的代码设计可能更好。\n使用MockingApi.Spy工厂方法创建间谍：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("SubscriberImpl subscriber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Spy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("constructorArgs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Fred"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h4",{attrs:{id:"partial-mocks-部分-mocks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#partial-mocks-部分-mocks"}},[t._v("#")]),t._v(" Partial Mocks [部分 Mocks]")]),t._v(" "),a("p",[t._v("（在使用此功能之前请三思。更改规范下的代码设计可能更好。）\nSpies can also be used as partial mocks:")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this is now the object under specification, not a collaborator")]),t._v("\nMessagePersister persister "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Spy "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// stub a call on the same object")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isPersistable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("when:")]),t._v("\npersister"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("receive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"msg"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token spock-block"}},[t._v("then:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// demand a call on the same object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" persister"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("persist")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"msg"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"groovy-mocks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#groovy-mocks"}},[t._v("#")]),t._v(" Groovy Mocks")]),t._v(" "),a("h4",{attrs:{id:"mocking-dynamic-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mocking-dynamic-methods"}},[t._v("#")]),t._v(" Mocking Dynamic Methods")]),t._v(" "),a("h4",{attrs:{id:"mocking-all-instances-of-a-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mocking-all-instances-of-a-type"}},[t._v("#")]),t._v(" Mocking All Instances of a Type")]),t._v(" "),a("h4",{attrs:{id:"mocking-constructors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mocking-constructors"}},[t._v("#")]),t._v(" Mocking Constructors")]),t._v(" "),a("h4",{attrs:{id:"mocking-static-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mocking-static-methods"}},[t._v("#")]),t._v(" Mocking Static Methods")]),t._v(" "),a("h3",{attrs:{id:"advanced-features"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#advanced-features"}},[t._v("#")]),t._v(" Advanced Features")]),t._v(" "),a("h4",{attrs:{id:"a-la-carte-mocks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-la-carte-mocks"}},[t._v("#")]),t._v(" A la Carte Mocks")]),t._v(" "),a("h4",{attrs:{id:"detecting-mock-objects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#detecting-mock-objects"}},[t._v("#")]),t._v(" Detecting Mock Objects")]),t._v(" "),a("h3",{attrs:{id:"further-reading"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#further-reading"}},[t._v("#")]),t._v(" Further Reading")]),t._v(" "),a("h2",{attrs:{id:"extensions-扩展机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extensions-扩展机制"}},[t._v("#")]),t._v(" Extensions [扩展机制]")]),t._v(" "),a("p",[t._v("Spock带有强大的扩展机制，允许 Hook到Specification的生命周期，以丰富或改变其行为。\n在本章中，我们将首先了解Spock的内置扩展，然后深入编写自定义扩展。")]),t._v(" "),a("h3",{attrs:{id:"spock-configuration-file-spock-配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spock-configuration-file-spock-配置文件"}},[t._v("#")]),t._v(" Spock Configuration File [Spock 配置文件]")]),t._v(" "),a("h3",{attrs:{id:"built-in-extensions-内建扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#built-in-extensions-内建扩展"}},[t._v("#")]),t._v(" Built-In Extensions [内建扩展]")]),t._v(" "),a("p",[t._v("Spock的大多数内置扩展都是注解驱动的。换句话说，它们是通过使用特定注解标识spec类或方法触发的。\n可以通过其@ExtensionAnnotation元注解来说明这样的注解。")]),t._v(" "),a("h4",{attrs:{id:"ignore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ignore"}},[t._v("#")]),t._v(" Ignore")]),t._v(" "),a("h4",{attrs:{id:"ignorerest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ignorerest"}},[t._v("#")]),t._v(" IgnoreRest")]),t._v(" "),a("h4",{attrs:{id:"ignoreif"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ignoreif"}},[t._v("#")]),t._v(" IgnoreIf")]),t._v(" "),a("h4",{attrs:{id:"requires"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requires"}},[t._v("#")]),t._v(" Requires")]),t._v(" "),a("h4",{attrs:{id:"pendingfeature"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pendingfeature"}},[t._v("#")]),t._v(" PendingFeature")]),t._v(" "),a("h4",{attrs:{id:"stepwise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stepwise"}},[t._v("#")]),t._v(" Stepwise")]),t._v(" "),a("h4",{attrs:{id:"timeout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timeout"}},[t._v("#")]),t._v(" Timeout")]),t._v(" "),a("h4",{attrs:{id:"retry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#retry"}},[t._v("#")]),t._v(" Retry")]),t._v(" "),a("h4",{attrs:{id:"use"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use"}},[t._v("#")]),t._v(" Use")]),t._v(" "),a("h4",{attrs:{id:"confinemetaclasschanges"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#confinemetaclasschanges"}},[t._v("#")]),t._v(" ConfineMetaClassChanges")]),t._v(" "),a("h4",{attrs:{id:"restoresystemproperties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#restoresystemproperties"}},[t._v("#")]),t._v(" RestoreSystemProperties")]),t._v(" "),a("h4",{attrs:{id:"autoattach"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#autoattach"}},[t._v("#")]),t._v(" AutoAttach")]),t._v(" "),a("h4",{attrs:{id:"autocleanup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#autocleanup"}},[t._v("#")]),t._v(" AutoCleanup")]),t._v(" "),a("h4",{attrs:{id:"title-and-narrative"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#title-and-narrative"}},[t._v("#")]),t._v(" Title and Narrative")]),t._v(" "),a("h4",{attrs:{id:"see"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#see"}},[t._v("#")]),t._v(" See")]),t._v(" "),a("h4",{attrs:{id:"issue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#issue"}},[t._v("#")]),t._v(" Issue")]),t._v(" "),a("h4",{attrs:{id:"subject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#subject"}},[t._v("#")]),t._v(" Subject")]),t._v(" "),a("h4",{attrs:{id:"rule"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rule"}},[t._v("#")]),t._v(" Rule")]),t._v(" "),a("h4",{attrs:{id:"classrule"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#classrule"}},[t._v("#")]),t._v(" ClassRule")]),t._v(" "),a("h4",{attrs:{id:"include-and-exclude"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#include-and-exclude"}},[t._v("#")]),t._v(" Include and Exclude")]),t._v(" "),a("h4",{attrs:{id:"optimize-run-order"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#optimize-run-order"}},[t._v("#")]),t._v(" Optimize Run Order")]),t._v(" "),a("h4",{attrs:{id:"report-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#report-log"}},[t._v("#")]),t._v(" Report Log")]),t._v(" "),a("h3",{attrs:{id:"third-party-extensions-第三方扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#third-party-extensions-第三方扩展"}},[t._v("#")]),t._v(" Third-Party Extensions [第三方扩展]")]),t._v(" "),a("p",[t._v("参考 "),a("a",{attrs:{href:"https://github.com/spockframework/spock/wiki/Third-Party-Extensions",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spock Wiki"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"writing-custom-extensions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#writing-custom-extensions"}},[t._v("#")]),t._v(" Writing Custom Extensions")]),t._v(" "),a("h4",{attrs:{id:"global-extensions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#global-extensions"}},[t._v("#")]),t._v(" Global Extensions")]),t._v(" "),a("h4",{attrs:{id:"annotation-driven-local-extensions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#annotation-driven-local-extensions"}},[t._v("#")]),t._v(" Annotation Driven Local Extensions")]),t._v(" "),a("h4",{attrs:{id:"configuration-objects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration-objects"}},[t._v("#")]),t._v(" Configuration Objects")]),t._v(" "),a("h4",{attrs:{id:"interceptors-拦截器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interceptors-拦截器"}},[t._v("#")]),t._v(" Interceptors [拦截器]")]),t._v(" "),a("p",[a("img",{attrs:{src:"_pic/spock_interceptors.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"modules"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#modules"}},[t._v("#")]),t._v(" Modules")]),t._v(" "),a("h3",{attrs:{id:"guice-module-与guice-ioc容器集成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#guice-module-与guice-ioc容器集成"}},[t._v("#")]),t._v(" Guice Module [与Guice IoC容器集成]")]),t._v(" "),a("h3",{attrs:{id:"spring-module-spring-模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-module-spring-模块"}},[t._v("#")]),t._v(" Spring Module  [Spring 模块 ]")]),t._v(" "),a("p",[t._v("Spring模块支持与Spring TestContext Framework集成。\n它支持以下Spring注释 @ContextConfiguration和@ContextHierarchy。\n此外，它支持元注释@BootstrapWith，因此任何使用@BootstrapWith注释的注释也可以使用，例如@SpringBootTest，@WebMvcTest。")]),t._v(" "),a("h3",{attrs:{id:"tapestry-module-与tapestry5-ioc容器集成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tapestry-module-与tapestry5-ioc容器集成"}},[t._v("#")]),t._v(" Tapestry Module [与Tapestry5 IoC容器集成]")]),t._v(" "),a("h3",{attrs:{id:"unitils-module-与unitils库集成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unitils-module-与unitils库集成"}},[t._v("#")]),t._v(" Unitils Module [与Unitils库集成]")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/linux-china/unitils",target:"_blank",rel:"noopener noreferrer"}},[t._v("Unitils"),a("OutboundLink")],1),t._v("\n注：\nUnitils 是一个开源库，旨在使单元和集成测试变得容易和可维护。\n它分为几个模块，每个模块都为单元测试和集成测试的某个方面提供额外的支持。\n例如，如果您需要模拟测试，只需将unitils-mock包含为依赖项。\n如果您还想加载DbUnit数据集，只需包含unitils-dbunit。")]),t._v(" "),a("h3",{attrs:{id:"grails-module-grails-模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grails-module-grails-模块"}},[t._v("#")]),t._v(" Grails Module [Grails 模块]")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/grails/grails",target:"_blank",rel:"noopener noreferrer"}},[t._v("Grails"),a("OutboundLink")],1)]),t._v(" "),a("blockquote",[a("p",[t._v("A powerful web application framework based on the Groovy language")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/spockframework/spock-grails",target:"_blank",rel:"noopener noreferrer"}},[t._v("spock-grails"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("注意：\nGrails 2.3及更高版本具有内置的Spock支持，不需要插件。")]),t._v(" "),a("h2",{attrs:{id:"release-notes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#release-notes"}},[t._v("#")]),t._v(" Release Notes")]),t._v(" "),a("h2",{attrs:{id:"migration-guide"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#migration-guide"}},[t._v("#")]),t._v(" Migration Guide")])])}),[],!1,null,null,null);s.default=e.exports}}]);